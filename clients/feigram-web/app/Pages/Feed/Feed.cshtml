@page "/Feed"
@using app.ViewModel
@using app.DTO
@model app.Pages.Feed.FeedModel

@{
  ViewData["Title"] = "Feed";
  Layout = "_Layout";
}

<head>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
</head>

<div class="container-fluid mt-4">
  <div class="row justify-content-center">

    <div class="col-12 col-md-9 col-lg-9 offset-lg-2">
      @foreach (var post in Model.PostCompletos)
      {
        <div class="card p-3 shadow-sm mb-4 rounded-4">
        <div class="d-flex align-items-center mb-2">
          <img src="@post.UserProfileImage" alt="Perfil" class="rounded-circle me-2" style="width: 45px; height: 45px; object-fit: cover;">
          <div>
            <h6 class="mb-0 fw-semibold">@post.Username</h6>
            <small class="text-muted">@post.TimeAgo</small>
          </div>
        </div>

        <div class="mb-3" onclick="openPostModal(@post.Id)" style="cursor: pointer;">
          <img src="@post.PostImage" class="img-fluid rounded shadow-sm" alt="Post de Asuna" style="max-height: 450px; object-fit: cover; width: 100%;" />
        </div>

        <p class="mb-3">@post.Description</p>

        <div class="d-flex align-items-center text-muted px-1 gap-4">
        <form class="d-inline-flex align-items-center gap-2" id="likeForm-@post.Id">
          <input type="hidden" name="PostId" value="@post.Id" />
          <input type="hidden" name="UserId" value="@HttpContext.Request.Cookies["user_id"]" />
          
          <button type="submit" class="btn btn-link p-0 text-danger d-flex align-items-center">
            <i class="bi bi-heart-fill me-1"></i>
            <span>Me gusta</span>
          </button>
          
          <span id="likes-count-@post.Id">@post.Likes</span>
        </form>



        <button type="button" onclick="openPostModal(@post.Id)" class="btn btn-link p-0 text-secondary d-flex align-items-center">
          <i class="bi bi-chat-dots-fill me-1"></i>
          <span>Comentar</span>
        </button>
        <span>@post.Comentarios</span>

        </div> 

      </div>
      <script type="application/json" id="post-data-@post.Id">
    @Html.Raw(Json.Serialize(new {
        post.Id,
        post.Description,
        post.PostImage,
        post.Likes,
        post.Comentarios,
        post.Username,
        post.UserProfileImage,
        post.TimeAgo
    }))
      </script>
    }
  </div>

    <div class="position-fixed end-0 me-4" style="top: 50px; width: 300px; z-index: 999;">
  <div class="card p-3 shadow-sm rounded-4">
    <h5>üë• Amigos</h5>
    <form class="d-flex mb-4" role="search">
      <input id="searchBox" class="form-control me-2 fs-5" type="search" placeholder="Buscar amigos..." aria-label="Buscar" autocomplete="off">
      <button class="btn btn-light" type="submit">üîç</button>
      <ul id="searchResults" class="list-unstyled mb-0" style="top: 100%; left: 0;"></ul>
    </form>
    <ul id="friendList" class="list-unstyled mb-0">
      @foreach (var amigo in Model.Amigos)
      {
          <li>
            <a href="javascript:void(0);" onclick="verPerfil('@amigo.Id')" class="text-decoration-none text-dark d-flex align-items-center">
              <img src="@amigo.ProfileImage" alt="Amigo" class="rounded-circle me-2" style="width: 30px; height: 30px; object-fit: cover;">
              <span>@amigo.Username</span>
            </a>
          </li>
      }
    </ul>
  </div>
</div>

  </div>
</div>

<button onclick="openUploadPictureModal()" 
        class="btn btn-light border border-dark rounded-circle shadow-lg position-fixed"
        title="Agregar publicaci√≥n"
        style="bottom: 30px; right: 30px; width: 60px; height: 60px; display: flex; justify-content: center; align-items: center; font-size: 28px; color: black; z-index: 9999;">
    Ôºã
</button>

<div class="modal fade" id="uploadPictureModal" tabindex="-1" aria-labelledby="uploadPictureModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content shadow-lg rounded-4">
      <div class="modal-header border-bottom-0">
        <h5 class="modal-title fw-semibold" id="uploadPictureModalLabel">Subir una foto nueva</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>

      <div class="modal-body">
        <form id="uploadPictureForm" method="post" enctype="multipart/form-data">
          <div id="previewContainer" class="mb-3 text-center" style="display: none;">
            <img id="imagePreview" class="img-fluid rounded shadow-sm border" style="max-height: 300px;" />
          </div>

          <div class="text-center mb-3">
            <input type="file" name="imagen" id="inputImagen" accept="image/*" style="display: none;" onchange="previewImage(this)" />
            <button type="button" class="btn btn-outline-primary rounded-pill px-4" onclick="document.getElementById('inputImagen').click()">Seleccionar imagen</button>
          </div>

          <div id="textContainer" class="mt-3" style="display: none;">
            <textarea name="description" class="form-control mb-3 rounded-3 shadow-sm" rows="3" placeholder="Escribe una descripci√≥n..."></textarea>
            <div class="text-end">
              <button type="submit" class="btn btn-primary rounded-pill px-4">Publicar</button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<div id="postModalContainer"></div>

<!-- Modal reutilizable -->
<div class="modal fade" id="consultPost" tabindex="-1" aria-labelledby="consultPostLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content" style="max-height: 90vh; overflow-y: auto;">
      <div class="modal-header">
        <h5 class="modal-title" id="consultPostLabel"></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <div class="modal-body d-flex flex-wrap">
        <div class="flex-grow-1 flex-shrink-1 me-3" style="min-width: 300px;">
          <img id="modalPostImage" class="img-fluid rounded" style="max-height: 70vh; object-fit: contain;" />
        </div>
        <div>
          <span id="modalPostDescription"></span>
          <hr/>
        </div>
        <div class="flex-grow-1" style="min-width: 300px; max-width: 500px;">
          <p><strong>Likes:</strong> <span id="modalPostLikes"></span> ‚ù§Ô∏è</p>
          <hr />
          <div  class="overflow-auto" style="max-height: 300px;" id="modalPostComments"> <!-- no olvidar poner id="modalPostComments" cuando quiera cargar comentarios-->
            <!-- Los comentarios se llenan din√°micamente -->
          </div>
          <form method="post" asp-page-handler="Comment" class="mt-3">
            <input type="hidden" id="modalPostId" name="PostId" />
            <textarea name="CommentText" class="form-control mb-2" rows="3" placeholder="Escribe tu comentario... ‚ú®"></textarea>
            <button type="submit" class="btn btn-primary btn-sm">Enviar üíå</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script src="~/js/posts.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('uploadPictureForm');

      form.addEventListener('submit', async function (e) {
        e.preventDefault(); 

        const formData = new FormData(form);

        const response = await fetch('/Feed?handler=NuevoPost', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          alert(result.message);
          const modal = bootstrap.Modal.getInstance(document.getElementById('uploadPictureModal'));
          modal.hide();
          location.reload(); // opcional: recargar la lista de posts
        } else {
          alert(result.message);
        }
      });
    });
  </script>

  <script>
  const currentUserId = "@HttpContext.Request.Cookies["user_id"]";
  document.addEventListener("DOMContentLoaded", () => {
    // Para cada formulario cuyo id empiece con 'likeForm-'
    document.querySelectorAll("form[id^='likeForm-']").forEach(form => {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Obtenemos el PostId del input hidden dentro del form
        const postId = form.querySelector('input[name="PostId"]').value;

        if (!currentUserId) {
          alert("Debes iniciar sesi√≥n para dar like.");
          return;
        }

        // Creamos FormData con PostId y UserId
        const formData = new FormData();
        formData.append("PostId", postId);
        formData.append("UserId", currentUserId);

        try {
          const response = await fetch("/Feed?handler=Like", {
            method: "POST",
            body: formData
          });

          if (!response.ok) {
            const errorText = await response.text();
            console.error("Error al dar like:", errorText);
            alert("Error al dar like.");
            return;
          }

          const result = await response.json();

          if (result.success) {
            // Actualizamos el contador de likes en la UI
            const likesElem = document.getElementById(`likes-count-${postId}`);
            if (likesElem) {
              let currentLikes = parseInt(likesElem.innerText) || 0;
              likesElem.innerText = currentLikes + 1;
            }
          } else {
            alert(result.message || "No se pudo registrar el like.");
          }
        } catch (error) {
          console.error("Error al enviar like:", error);
          alert("Ocurri√≥ un error al enviar el like.");
        }
      });
    });
  });

</script>

<!--
<script>
document.addEventListener("DOMContentLoaded", () => {
  // Seleccionamos todos los formularios con id que empiece con likeForm-
  document.querySelectorAll("form[id^='likeForm-']").forEach(form => {
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Obtener PostId desde el input hidden dentro del form
      const postId = form.querySelector('input[name="PostId"]').value;

      if (!currentUserId) {
        alert("Debes iniciar sesi√≥n para dar like.");
        return;
      }

      // Crear FormData con PostId y UserId
      const formData = new FormData();
      formData.append("PostId", postId);
      formData.append("UserId", currentUserId);

      try {
        const response = await fetch("/Feed?handler=Like", {
          method: "POST",
          body: formData
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.error("Error al dar like:", errorText);
          alert("Error al dar like.");
          return;
        }

        const result = await response.json();

        if (result.success) {
          // Actualizamos el contador de likes visible
          const likesElem = document.getElementById(`likes-count-${postId}`);
          if (likesElem) {
            let currentLikes = parseInt(likesElem.innerText) || 0;
            likesElem.innerText = currentLikes + 1;
          }
        } else {
          alert(result.message || "No se pudo registrar el like.");
        }

      } catch (error) {
        console.error("Error al enviar like:", error);
        alert("Ocurri√≥ un error al enviar el like.");
      }
    });
  });
});
comentarios-->
</script>

<script>
  function verPerfil(userId) {
    console.log("Perfil seleccionado:", userId);
    // Redirigir o abrir modal, seg√∫n tu l√≥gica:
    // window.location.href = `/Profile/${userId}`;
  }
</script>



<script>
    const searchBox = document.getElementById('searchBox');
    const resultsList = document.getElementById('searchResults');

    let timeoutId;

    searchBox.addEventListener('input', function () {
        clearTimeout(timeoutId);
        const query = searchBox.value.trim();
        if (query === "") {
            resultsList.innerHTML = "";
            return;
        }

        timeoutId = setTimeout(() => {
            fetch(`/Feed?handler=BuscarAmigos&nombre=${encodeURIComponent(query)}`)
                .then(response => {
                    if (!response.ok) throw new Error("Error al buscar");
                    return response.json();
                })
                .then(data => {
                    resultsList.innerHTML = "";

                    if (data.length === 0) {
                        resultsList.innerHTML = `<li class="text-muted">Sin resultados</li>`;
                        return;
                    }

                    data.forEach(amigo => {
                        const li = document.createElement("li");
                        li.innerHTML = `
                          <a href="javascript:void(0);" onclick="verPerfil('${amigo.id}')" class="text-decoration-none text-dark d-flex align-items-center mb-1">
                            <img src="${amigo.photo}" alt="Amigo" class="rounded-circle me-2" style="width: 30px; height: 30px; object-fit: cover;">
                            <span>${amigo.name}</span>
                          </a>`;
                        resultsList.appendChild(li);
                    });
                })
                .catch(error => {
                    resultsList.innerHTML = `<li class="text-danger">Error al buscar</li>`;
                    console.error(error);
                });
        }, 300);
    });
</script>

}
